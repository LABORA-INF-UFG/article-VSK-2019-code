simulated.intervals <- c()
simulated.durations <- data.frame(duration=c(), num.operations=c())
simulated.zooms <- data.frame(last=c(), current=c(), x=c(), y=c())
simulated.zooms.array <- c()
simulated.zooms.jump <- c()
simulated.pans <- data.frame(x=c(), y=c())
simulated.number.of.operations <- c()
print(paste("PROC =", procnum, sep=" "))
file.path = paste(SIMULATED_DATA_PATH, "/musegen-original5-", procnum, ".csv", sep="")
total.interval <- 0
for (g in 1:10000000) {
SIZE <- 10000
freq.frame <- as.data.frame(op.dens)
freq.frame
lastOp <- ""
lastZoom <- ""
last.pan.dir <- ""
last.zoom.dir <- ""
#escolher primeiro passo
(U <- runif(1))
for (i in 1:length(operations.path$start.prob)) {
probs.sorted <- sort(operations.path$start.prob)
if (U < sum(probs.sorted[1:i])) {
# lastOp <- rownames(as.matrix(probs.sorted))[i]
# lastZoom <- lastOp
lastOp <- sample(c("15", "16", "17"), 1)
lastZoom <- sample(c("15", "16", "17"), 1)
break
}
}
resolution <- choose.resolution()
passos <- c(paste("SET_RESOLUTION(", resolution, ")", sep=""))
initial.point <- choose.initial.original.point(lastZoom)
start.interval <- simulate.interval()
total.interval <- total.interval + start.interval
passos <- c(passos, paste("START(", initial.point, ")+", start.interval, sep=""))
for (i in 1:SIZE) {
probs <- freq.frame[as.numeric(lastOp),]
probs.sorted <- sort(probs)
U <- runif(1)
for (j in 1:length(probs.sorted)) {
if (U < sum(probs.sorted[1:j])) {
#path.synt <- c(path.synt, colnames(probs.sorted)[j])
lastOp <- colnames(probs.sorted)[j]
break
}
}
if (lastOp == "start/end") {
break
} else {
operation.sim <- simulate.operation(lastOp, lastZoom, last.pan.dir, last.zoom.dir)
lastZoom <- lastOp
passos <- c(passos, operation.sim)
}
#     if (total.interval > 1000 * 60 * 10) {
#       print(paste("Total interval:", total.interval / (1000 * 60), "min", "NUM_OP:", length(passos), sep=" "))
#       total.interval <- 0
#       break
#     }
}
passos <- c(passos)
#print(passos, quote = FALSE)
#  if (length(passos) > 3) {
cat(paste(passos, collapse=";"), file=file.path, append=TRUE, sep="\n")
#  } else {
#    g <- g - 1
#  }
simulated.number.of.operations <- c(simulated.number.of.operations, length(passos))
simulated.durations <- rbind(simulated.durations, data.frame(duration=total.interval, num.operations=length(passos)))
#print(total.interval)
#print(paste("Total interval:", total.interval / (1000 * 60), "min", "NUM_OP:", length(passos), sep=" "))
total.interval <- 0
#print(max(simulated.number.of.operations))
print(g)
}
}
#cat("",file=file.path,append=FALSE)
op.dens.bkp <- op.dens
op.dens
op.dens = op.dens[1:20,1:20];op.dens
sum(op.dens)
apply(op.dens, MARGIN=c(1), FUN=function(x) sum(x))
op.dens = op.dens/apply(op.dens, MARGIN=c(1), FUN=function(x) sum(x))
sum(op.dens)
as.data.frame(op.dens)
path = "/home/vinicius/pCloudDrive/sync/mestrado/3-semestre/dissertacao/frameworkdeeventos/gerador-graficos/data/SessionDurations.csv"
durations = scan(file=path)
# SUMMARY OF SESSION DURATIONS
summary(durations)
# SUMMARY OF SESSION DURATIONS
durations
head(acessos,3)
plot(ecdf(op.per.access),ylim=c(0,1),lw=4, log="x", xlim=c(min(op.per.access), max(op.per.access)), main="", ylab="% do Total", xlab="Nº de ações por sessão")
lines(ecdf(wei),lw=4,verticals=T, col="red")
legend("bottomright", legend = c("Observado", "Weibull"),
col = c("black","red"), pch=c(NA,NA), lty = c(1, 1),
lwd=c(3,3),bty="n", pt.cex=2)
ecdfPlot(op.per.access, ecdf.lty=1, ecdf.lw=6, ecdf.col=1, ylab=expression("Prob(Number of actions " <= " x)"),
xlab="Number of actions", main="", xlim=c(min(wei), max(op.per.access)))
util$pkgRequire("ADGofTest")
util$pkgRequire("EnvStats")
util$pkgRequire("fitdistrplus")
ecdfPlot(op.per.access, ecdf.lty=1, ecdf.lw=6, ecdf.col=1, ylab=expression("Prob(Number of actions " <= " x)"),
xlab="Number of actions", main="", xlim=c(min(wei), max(op.per.access)))
ecdfPlot(wei, ecdf.lty=2, ecdf.lw=6, ecdf.col=2, ylab=expression("Prob(Number of actions " <= " x)"),
xlab="Number of actions", main="", add=T)
legend("bottomright", legend = c("Observed", "Weibull"),
col = c("black","red"), pch=c(NA,NA), lty=c(1, 2),
lwd=c(4,4),bty="n", pt.cex=2)
ecdfPlot(op.per.access, ecdf.lty=1, ecdf.lw=6, ecdf.col=1, ylab=expression("Prob(Number of actions " <= " x)"),
xlab="Number of actions", main="", xlim=c(min(wei), max(op.per.access)))
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
sample(op.per.access, 1)
source('./util/util.R')
remove.packages(nlme)
util$pkgRequire("nlme")
util$pkgRequire("maptools")
util$pkgRequire("evmix")
util$pkgRequire("doParallel")
library(doParallel)
MAX_ZOOM=20
registerDoParallel(16)
foreach(procnum=1:16) %dopar% {
simulated.intervals <- c()
simulated.durations <- data.frame(duration=c(), num.operations=c())
simulated.zooms <- data.frame(last=c(), current=c(), x=c(), y=c())
simulated.zooms.array <- c()
simulated.zooms.jump <- c()
simulated.pans <- data.frame(x=c(), y=c())
simulated.number.of.operations <- c()
print(paste("PROC =", procnum, sep=" "))
file.path = paste(SIMULATED_DATA_PATH, "/musegen-original6-", procnum, ".csv", sep="")
total.interval <- 0
for (g in 1:10000000) {
SIZE <- 10000
freq.frame <- as.data.frame(op.dens)
freq.frame
lastOp <- ""
lastZoom <- ""
last.pan.dir <- ""
last.zoom.dir <- ""
#escolher primeiro passo
(U <- runif(1))
for (i in 1:length(operations.path$start.prob)) {
probs.sorted <- sort(operations.path$start.prob)
if (U < sum(probs.sorted[1:i])) {
# lastOp <- rownames(as.matrix(probs.sorted))[i]
# lastZoom <- lastOp
lastOp <- sample(c("15", "16", "17"), 1)
lastZoom <- sample(c("15", "16", "17"), 1)
break
}
}
resolution <- choose.resolution()
passos <- c(paste("SET_RESOLUTION(", resolution, ")", sep=""))
initial.point <- choose.initial.original.point(lastZoom)
start.interval <- simulate.interval()
total.interval <- total.interval + start.interval
passos <- c(passos, paste("START(", initial.point, ")+", start.interval, sep=""))
num.ops = sample(op.per.access, 1)
for (i in 1:num.ops) {
probs <- freq.frame[as.numeric(lastOp),]
probs.sorted <- sort(probs)
U <- runif(1)
for (j in 1:length(probs.sorted)) {
if (U < sum(probs.sorted[1:j])) {
#path.synt <- c(path.synt, colnames(probs.sorted)[j])
lastOp <- colnames(probs.sorted)[j]
break
}
}
if (lastOp == "start/end") {
break
} else {
operation.sim <- simulate.operation(lastOp, lastZoom, last.pan.dir, last.zoom.dir)
lastZoom <- lastOp
passos <- c(passos, operation.sim)
}
#     if (total.interval > 1000 * 60 * 10) {
#       print(paste("Total interval:", total.interval / (1000 * 60), "min", "NUM_OP:", length(passos), sep=" "))
#       total.interval <- 0
#       break
#     }
}
passos <- c(passos)
#print(passos, quote = FALSE)
#  if (length(passos) > 3) {
cat(paste(passos, collapse=";"), file=file.path, append=TRUE, sep="\n")
#  } else {
#    g <- g - 1
#  }
simulated.number.of.operations <- c(simulated.number.of.operations, length(passos))
simulated.durations <- rbind(simulated.durations, data.frame(duration=total.interval, num.operations=length(passos)))
#print(total.interval)
#print(paste("Total interval:", total.interval / (1000 * 60), "min", "NUM_OP:", length(passos), sep=" "))
total.interval <- 0
#print(max(simulated.number.of.operations))
print(g)
}
}
foreach(procnum=1:16) %dopar% {
simulated.intervals <- c()
simulated.durations <- data.frame(duration=c(), num.operations=c())
simulated.zooms <- data.frame(last=c(), current=c(), x=c(), y=c())
simulated.zooms.array <- c()
simulated.zooms.jump <- c()
simulated.pans <- data.frame(x=c(), y=c())
simulated.number.of.operations <- c()
print(paste("PROC =", procnum, sep=" "))
file.path = paste(SIMULATED_DATA_PATH, "/musegen-original6-", procnum, ".csv", sep="")
total.interval <- 0
for (g in 1:10000000) {
SIZE <- 10000
freq.frame <- as.data.frame(op.dens)
freq.frame
lastOp <- ""
lastZoom <- ""
last.pan.dir <- ""
last.zoom.dir <- ""
#escolher primeiro passo
(U <- runif(1))
for (i in 1:length(operations.path$start.prob)) {
probs.sorted <- sort(operations.path$start.prob)
if (U < sum(probs.sorted[1:i])) {
lastOp <- rownames(as.matrix(probs.sorted))[i]
lastZoom <- lastOp
break
}
}
resolution <- choose.resolution()
passos <- c(paste("SET_RESOLUTION(", resolution, ")", sep=""))
initial.point <- choose.initial.original.point(lastZoom)
start.interval <- simulate.interval()
total.interval <- total.interval + start.interval
passos <- c(passos, paste("START(", initial.point, ")+", start.interval, sep=""))
num.ops = sample(op.per.access, 1)
for (i in 1:num.ops) {
probs <- freq.frame[as.numeric(lastOp),]
probs.sorted <- sort(probs)
U <- runif(1)
for (j in 1:length(probs.sorted)) {
if (U < sum(probs.sorted[1:j])) {
#path.synt <- c(path.synt, colnames(probs.sorted)[j])
lastOp <- colnames(probs.sorted)[j]
break
}
}
if (lastOp == "start/end") {
break
} else {
operation.sim <- simulate.operation(lastOp, lastZoom, last.pan.dir, last.zoom.dir)
lastZoom <- lastOp
passos <- c(passos, operation.sim)
}
#     if (total.interval > 1000 * 60 * 10) {
#       print(paste("Total interval:", total.interval / (1000 * 60), "min", "NUM_OP:", length(passos), sep=" "))
#       total.interval <- 0
#       break
#     }
}
passos <- c(passos)
#print(passos, quote = FALSE)
#  if (length(passos) > 3) {
cat(paste(passos, collapse=";"), file=file.path, append=TRUE, sep="\n")
#  } else {
#    g <- g - 1
#  }
simulated.number.of.operations <- c(simulated.number.of.operations, length(passos))
simulated.durations <- rbind(simulated.durations, data.frame(duration=total.interval, num.operations=length(passos)))
#print(total.interval)
#print(paste("Total interval:", total.interval / (1000 * 60), "min", "NUM_OP:", length(passos), sep=" "))
total.interval <- 0
#print(max(simulated.number.of.operations))
print(g)
}
}
mytest$data = read.csv('/home/vinicius/peval/simulation-results/musegen-original6/intervals.csv', sep=",", header = T)
head(mytest$data[,2])
mytest$data = read.csv('/home/vinicius/peval/simulation-results/musegen-original/intervals.csv', sep=",", header = T)
head(mytest$data[,2])
mytest$intervals = mytest$data[,2]/1000
#mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$intervals = sample(mytest$intervals, 2000)
summary(mytest$intervals)
ecdfPlot(intervals, ecdf.lty=1, ecdf.lw=6, ecdf.col=1, ylab=expression("P(Interval " <= " x)"),
xlab="Interval (s)", main="", log="x", xlim=c(min(model.par.log), max(model.par.log)))
util$pkgRequire("EnvStats")
ecdfPlot(intervals, ecdf.lty=1, ecdf.lw=6, ecdf.col=1, ylab=expression("P(Interval " <= " x)"),
xlab="Interval (s)", main="", log="x", xlim=c(min(model.par.log), max(model.par.log)))
ecdfPlot(model.par.log, ecdf.lty=2, ecdf.lw=6, ecdf.col=2, add=T)
ecdfPlot(mytest$intervals, ecdf.lty=3, ecdf.lw=6, ecdf.col=3, add=T)
summary(mytest$intervals)
summary(intervals)
mytest$intervals[mytest$intervals < 0.5]
intervals[intervals < 0.5]
mytest$musegen.durations = read.csv('/home/vinicius/peval/simulation-results/musegen-original/durations.csv', sep=",", header = T)
head(mytest$musegen.durations)
mytest$musegen.durations = mytest$musegen.durations[,2]/1000
mytest$musegen.durations = sample(mytest$musegen.durations, 10000)
mytest$help.durations = read.csv('/home/vinicius/peval/simulation-results/help/durations.csv', sep=",", header = T)
head(mytest$help.durations[,2])
mytest$help.durations = mytest$help.durations[,2]/1000
mytest$help.durations = sample(mytest$help.durations, 10000)
mytest$custom.help.durations = read.csv('/home/vinicius/peval/simulation-results/custom-help/durations.csv', sep=",", header = T)
head(mytest$custom.help.durations[,2])
mytest$custom.help.durations = mytest$custom.help.durations[,2]/1000
mytest$custom.help.durations = sample(mytest$custom.help.durations, 10000)
#mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$intervals = sample(mytest$intervals, 2000)
summary(mytest$intervals)
summary(mytest$musegen.durations)
quantile(mytest$musegen.durations, 0.05)
quantile(durations[durations <= 60*60 * 24], 0.05)
summary(durations[durations <= 60*60 * 24])
ecdfPlot(mytest$musegen.durations, ecdf.lty=1, ecdf.lw=6, ecdf.col=2, ylab=expression("P(Session Duration " <= " x)"),
xlab="Session Duration (s)", main="", log="x")
ecdfPlot(durations[durations <= 60*60 * 24], ecdf.lty=4, ecdf.lw=6, ecdf.col=3, add=T)
util$pkgRequire("EnvStats")
mytest = new.env()
mytest$data = read.csv('/home/vinicius/peval/simulation-results/musegen-original/intervals.csv', sep=",", header = T)
head(mytest$data[,2])
mytest$intervals = mytest$data[,2]/1000
#mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$intervals = sample(mytest$intervals, 2000)
summary(mytest$intervals)
ecdfPlot(intervals, ecdf.lty=1, ecdf.lw=6, ecdf.col=1, ylab=expression("P(Interval " <= " x)"),
xlab="Interval (s)", main="", log="x", xlim=c(min(model.par.log), max(model.par.log)))
ecdfPlot(model.par.log, ecdf.lty=2, ecdf.lw=6, ecdf.col=2, add=T)
ecdfPlot(mytest$intervals, ecdf.lty=3, ecdf.lw=6, ecdf.col=3, add=T)
summary(mytest$intervals)
summary(intervals)
mytest$intervals[mytest$intervals < 0.5]
intervals[intervals < 0.5]
mytest$musegen.durations = read.csv('/home/vinicius/peval/simulation-results/musegen/durations.csv', sep=",", header = T)
mytest$musegen.durations = read.csv('/home/vinicius/peval/simulation-results/musegen/durations.csv', sep=",", header = T)
head(mytest$musegen.durations)
mytest$musegen.durations = mytest$musegen.durations[,2]/1000
mytest$musegen.durations = sample(mytest$musegen.durations, 10000)
mytest$help.durations = read.csv('/home/vinicius/peval/simulation-results/help/durations.csv', sep=",", header = T)
head(mytest$help.durations[,2])
mytest$help.durations = mytest$help.durations[,2]/1000
mytest$help.durations = sample(mytest$help.durations, 10000)
mytest$custom.help.durations = read.csv('/home/vinicius/peval/simulation-results/custom-help/durations.csv', sep=",", header = T)
head(mytest$custom.help.durations[,2])
mytest$custom.help.durations = mytest$custom.help.durations[,2]/1000
mytest$custom.help.durations = sample(mytest$custom.help.durations, 10000)
#mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$intervals = sample(mytest$intervals, 2000)
summary(mytest$intervals)
summary(mytest$musegen.durations)
quantile(mytest$musegen.durations, 0.05)
quantile(durations[durations <= 60*60 * 24], 0.05)
summary(durations[durations <= 60*60 * 24])
util$plot.eps("duration-comparisson-musegen-help-custom-help")
ecdfPlot(mytest$musegen.durations, ecdf.lty=1, ecdf.lw=6, ecdf.col=2, ylab=expression("P(Session Duration " <= " x)"),
xlab="Session Duration (s)", main="", log="x")
ecdfPlot(mytest$help.durations, ecdf.lty=2, ecdf.lw=6, ecdf.col=4, add=T)
ecdfPlot(mytest$custom.help.durations, ecdf.lty=4, ecdf.lw=6, ecdf.col=3, add=T)
legend("bottomright", legend=c("MUSeGen", "HELP", "Custom HELP"), col=c(2,4,3), lty=c(1,2,4), lwd=c(2, 2, 2), pch=c(NA,NA,NA), bty="n")
dev.off()
mytest$musegen.num.operations = read.csv('/home/vinicius/peval/simulation-results/musegen/num_operations.csv', sep=",", header = T)
head(mytest$musegen.num.operations)
mytest$musegen.num.operations = mytest$musegen.num.operations[,2]
mytest$musegen.num.operations = sample(mytest$musegen.num.operations, 10000)
mytest$help.num.operations = read.csv('/home/vinicius/peval/simulation-results/help/num_operations.csv', sep=",", header = T)
head(mytest$help.num.operations[,2])
mytest$help.num.operations = mytest$help.num.operations[,2]
mytest$musegen.durations = read.csv('/home/vinicius/peval/simulation-results/musegen/durations.csv', sep=",", header = T)
head(mytest$musegen.durations)
mytest$musegen.durations = mytest$musegen.durations[,2]/1000
mytest$musegen.durations = sample(mytest$musegen.durations, 10000)
mytest$help.durations = read.csv('/home/vinicius/peval/simulation-results/help/durations.csv', sep=",", header = T)
head(mytest$help.durations[,2])
mytest$help.durations = mytest$help.durations[,2]/1000
mytest$help.durations = sample(mytest$help.durations, 10000)
mytest$custom.help.durations = read.csv('/home/vinicius/peval/simulation-results/custom-help/durations.csv', sep=",", header = T)
head(mytest$custom.help.durations[,2])
mytest$custom.help.durations = mytest$custom.help.durations[,2]/1000
mytest$custom.help.durations = sample(mytest$custom.help.durations, 10000)
#mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$intervals = sample(mytest$intervals, 2000)
summary(mytest$intervals)
summary(mytest$musegen.durations)
quantile(mytest$musegen.durations, 0.05)
quantile(durations[durations <= 60*60 * 24], 0.05)
summary(durations[durations <= 60*60 * 24])
util$plot.eps("duration-comparisson-musegen-help-custom-help")
ecdfPlot(mytest$musegen.durations, ecdf.lty=1, ecdf.lw=6, ecdf.col=2, ylab=expression("P(Session Duration " <= " x)"),
xlab="Session Duration (s)", main="", log="x")
ecdfPlot(mytest$help.durations, ecdf.lty=2, ecdf.lw=6, ecdf.col=4, add=T)
ecdfPlot(mytest$custom.help.durations, ecdf.lty=4, ecdf.lw=6, ecdf.col=3, add=T)
legend("bottomright", legend=c("MUSeGen", "HELP", "Custom HELP"), col=c(2,4,3), lty=c(1,2,4), lwd=c(2, 2, 2), pch=c(NA,NA,NA), bty="n")
dev.off()
mytest$musegen.num.operations = read.csv('/home/vinicius/peval/simulation-results/musegen/num_operations.csv', sep=",", header = T)
head(mytest$musegen.num.operations)
mytest$musegen.num.operations = mytest$musegen.num.operations[,2]
mytest$musegen.num.operations = sample(mytest$musegen.num.operations, 10000)
mytest$help.num.operations = read.csv('/home/vinicius/peval/simulation-results/help/num_operations.csv', sep=",", header = T)
head(mytest$help.num.operations[,2])
mytest$help.num.operations = mytest$help.num.operations[,2]
mytest$help.num.operations = sample(mytest$help.num.operations, 10000)
mytest$custom.help.num.operations = read.csv('/home/vinicius/peval/simulation-results/custom-help/num_operations.csv', sep=",", header = T)
head(mytest$custom.help.num.operations[,2])
mytest$custom.help.num.operations = mytest$custom.help.num.operations[,2]
mytest$custom.help.num.operations = sample(mytest$custom.help.num.operations, 10000)
#mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$intervals = sample(mytest$intervals, 2000)
summary(mytest$intervals)
util$plot.eps("number-of-operations-comparisson-musegen-help-custom-help")
ecdfPlot(mytest$musegen.num.operations, ecdf.lty=1, ecdf.lw=6, ecdf.col=2, ylab=expression("P(Number of operations " <= " x)"),
xlab="Number of operations", main="")
ecdfPlot(mytest$help.num.operations, ecdf.lty=2, ecdf.lw=6, ecdf.col=4, add=T)
ecdfPlot(mytest$custom.help.num.operations, ecdf.lty=4, ecdf.lw=6, ecdf.col=3, add=T)
legend("bottomright", legend=c("MUSeGen", "HELP", "Custom HELP"), col=c(2,4,3), lty=c(1,2,4), lwd=c(2, 2, 2), pch=c(NA,NA,NA), bty="n")
dev.off()
mytest$musegen.durations = read.csv('/home/vinicius/peval/simulation-results/musegen/durations.csv', sep=",", header = T)
head(mytest$musegen.durations)
mytest$musegen.durations = mytest$musegen.durations[,2]/1000
mytest$musegen.durations = sample(mytest$musegen.durations, 10000)
mytest$help.durations = read.csv('/home/vinicius/peval/simulation-results/help/durations.csv', sep=",", header = T)
head(mytest$help.durations[,2])
mytest$help.durations = mytest$help.durations[,2]/1000
mytest$help.durations = sample(mytest$help.durations, 10000)
mytest$custom.help.durations = read.csv('/home/vinicius/peval/simulation-results/custom-help/durations.csv', sep=",", header = T)
head(mytest$custom.help.durations[,2])
mytest$custom.help.durations = mytest$custom.help.durations[,2]/1000
mytest$custom.help.durations = sample(mytest$custom.help.durations, 10000)
#mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$intervals = sample(mytest$intervals, 2000)
util$plot.eps("duration-comparisson-musegen-help-custom-help")
ecdfPlot(mytest$musegen.durations, ecdf.lty=1, ecdf.lw=6, ecdf.col=2, ylab=expression("P(Session Duration " <= " x)"),
xlab="Session Duration (s)", main="", log="x")
ecdfPlot(mytest$help.durations, ecdf.lty=2, ecdf.lw=6, ecdf.col=4, add=T)
ecdfPlot(mytest$custom.help.durations, ecdf.lty=4, ecdf.lw=6, ecdf.col=3, add=T)
legend("bottomright", legend=c("MUSeGen", "HELP", "Custom HELP"), col=c(2,4,3), lty=c(1,2,4), lwd=c(2, 2, 2), pch=c(NA,NA,NA), bty="n")
dev.off()
mytest$musegen.num.operations = read.csv('/home/vinicius/peval/simulation-results/musegen/num_operations.csv', sep=",", header = T)
head(mytest$musegen.num.operations)
mytest$musegen.num.operations = mytest$musegen.num.operations[,2]
mytest$musegen.num.operations = sample(mytest$musegen.num.operations, 10000)
mytest$help.num.operations = read.csv('/home/vinicius/peval/simulation-results/help/num_operations.csv', sep=",", header = T)
head(mytest$help.num.operations[,2])
mytest$help.num.operations = mytest$help.num.operations[,2]
mytest$help.num.operations = sample(mytest$help.num.operations, 10000)
mytest$custom.help.num.operations = read.csv('/home/vinicius/peval/simulation-results/custom-help/num_operations.csv', sep=",", header = T)
head(mytest$custom.help.num.operations[,2])
mytest$custom.help.num.operations = mytest$custom.help.num.operations[,2]
mytest$custom.help.num.operations = sample(mytest$custom.help.num.operations, 10000)
util$plot.eps("number-of-operations-comparisson-musegen-help-custom-help")
ecdfPlot(mytest$musegen.num.operations, ecdf.lty=1, ecdf.lw=6, ecdf.col=2, ylab=expression("P(Number of operations " <= " x)"),
xlab="Number of operations", main="")
ecdfPlot(mytest$help.num.operations, ecdf.lty=2, ecdf.lw=6, ecdf.col=4, add=T)
ecdfPlot(mytest$custom.help.num.operations, ecdf.lty=4, ecdf.lw=6, ecdf.col=3, add=T)
legend("bottomright", legend=c("MUSeGen", "HELP", "Custom HELP"), col=c(2,4,3), lty=c(1,2,4), lwd=c(2, 2, 2), pch=c(NA,NA,NA), bty="n")
dev.off()
mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$musegen.durations = read.csv('/home/vinicius/peval/simulation-results/musegen/durations.csv', sep=",", header = T)
head(mytest$musegen.durations)
mytest$musegen.durations = mytest$musegen.durations[,2]/1000
mytest$musegen.durations = sample(mytest$musegen.durations, 10000)
mytest$help.durations = read.csv('/home/vinicius/peval/simulation-results/help/durations.csv', sep=",", header = T)
head(mytest$help.durations[,2])
mytest$help.durations = mytest$help.durations[,2]/1000
mytest$help.durations = sample(mytest$help.durations, 10000)
mytest$custom.help.durations = read.csv('/home/vinicius/peval/simulation-results/custom-help/durations.csv', sep=",", header = T)
head(mytest$custom.help.durations[,2])
mytest$custom.help.durations = mytest$custom.help.durations[,2]/1000
mytest$custom.help.durations = sample(mytest$custom.help.durations, 10000)
mytest$intervals = mytest$intervals[mytest$intervals < 4*60*60]
mytest$intervals = sample(mytest$intervals, 2000)
summary(mytest$intervals)
summary(mytest$musegen.durations)
quantile(mytest$musegen.durations, 0.05)
quantile(durations[durations <= 60*60 * 24], 0.05)
summary(durations[durations <= 60*60 * 24])
util$plot.eps("duration-comparisson-musegen-help-custom-help")
ecdfPlot(mytest$musegen.durations, ecdf.lty=1, ecdf.lw=6, ecdf.col=2, ylab=expression("P(Session Duration " <= " x)"),
xlab="Session Duration (s)", main="", log="x")
ecdfPlot(mytest$help.durations, ecdf.lty=2, ecdf.lw=6, ecdf.col=4, add=T)
ecdfPlot(mytest$custom.help.durations, ecdf.lty=4, ecdf.lw=6, ecdf.col=3, add=T)
legend("bottomright", legend=c("MUSeGen", "HELP", "Custom HELP"), col=c(2,4,3), lty=c(1,2,4), lwd=c(2, 2, 2), pch=c(NA,NA,NA), bty="n")
dev.off()
